//------------------------------------------------------------------------------
//   Warning: This code was automatically generated.
//   Changes to this file may cause incorrect behavior
//   and will be lost when this file is regenerated.
//------------------------------------------------------------------------------
//
// |metacode:version=0.1|
// |metacode:generator_header|
using System;
using System.Linq;
using MetaFac.CG3.Generators;

namespace MetaCode.TS3.Generator.Records
{
    public partial class Generator : GeneratorBase
    {
        public Generator() : base("MetaCode.TS3.Records") { }
        protected override void OnGenerate(TemplateScope outerScope)
        {
// |metacode:generator_body|
Define("BooleanFieldType","Boolean");
Define("SByteFieldType","SByte");
Define("ByteFieldType","Byte");
Define("Int16FieldType","Int16");
Define("UInt16FieldType","UInt16");
Define("CharFieldType","Char");
Define("Int32FieldType","Int32");
Define("UInt32FieldType","UInt32");
Define("SingleFieldType","Single");
Define("Int64FieldType","Int64");
Define("UInt64FieldType","UInt64");
Define("DoubleFieldType","Double");
Define("DateTimeFieldType","DateTime");
Define("TimeSpanFieldType","TimeSpan");
Define("DateTimeZoneFieldType","DateTimeOffset");
Define("DecimalFieldType","Decimal");
Define("GuidFieldType","Guid");
Define("StringFieldType","String");
Define("BinaryFieldType","byte[]");
Define("ExternalBoolean","T_BooleanFieldType_");
Define("ExternalSByte","T_SByteFieldType_");
Define("ExternalByte","T_ByteFieldType_");
Define("ExternalInt16","T_Int16FieldType_");
Define("ExternalUInt16","T_UInt16FieldType_");
Define("ExternalChar","T_CharFieldType_");
Define("ExternalInt32","T_Int32FieldType_");
Define("ExternalUInt32","T_UInt32FieldType_");
Define("ExternalSingle","T_SingleFieldType_");
Define("ExternalInt64","T_Int64FieldType_");
Define("ExternalUInt64","T_UInt64FieldType_");
Define("ExternalDouble","T_DoubleFieldType_");
Define("ExternalDateTime","T_DateTimeFieldType_");
Define("ExternalTimeSpan","T_TimeSpanFieldType_");
Define("ExternalDateTimeOffset","T_DateTimeZoneFieldType_");
Define("ExternalDecimal","T_DecimalFieldType_");
Define("ExternalGuid","T_GuidFieldType_");
Define("ExternalString","T_StringFieldType_");
Define("ExternalBinaryFieldType","T_BinaryFieldType_");
Define("BinaryFieldType","Octets");
Define("BaseClassName","object");
Emit("#region Auto-generated");
Emit("//");
Emit("// Warning: This code was automatically generated. Changes to this file may");
Emit("// cause incorrect behavior and will be lost when this file is regenerated.");
Emit("//");
Emit("// This file was generated by the MetaCode.TS3.CLI tool (or mcts3)");
Emit("// using a MetaCode generator and modified according to supplied metadata.");
Emit("//");
Emit("// Generator: T_GeneratorId_ T_GeneratorVersion_");
Emit("// Metadata : T_MetadataSource_ T_MetadataVersion_");
Emit("//");
Emit("// For more information about using this tool, the help command is:");
Emit("// mcts3 g2c --help");
Emit("//");
Emit("// To download and install the tool, the .NET CLI command is:");
Emit("// dotnet tool install --global MetaCode.TS3.CLI");
Emit("//");
Emit("//--------------------------------------------------------------------------------");
Emit("#endregion");
Emit("#nullable enable");
Emit("using MetaFac.Memory;");
Emit("using MetaFac.CG3.Runtime;");
Emit("using System;");
Emit("using System.Collections.Generic;");
Emit("using System.Collections.Immutable;");
Emit("using System.Linq;");
Emit("using System.Runtime.CompilerServices;");
Emit("using T_Namespace_.Interfaces;");
Emit("");
Emit("namespace T_Namespace_.Records");
Emit("{");
    using (Ignored()) {
Emit("    using T_ExternalOtherType_ = System.Int64;");
Emit("    using T_IndexType_ = System.String;");
    }
Emit("");
    using (Ignored()) {
Emit("    public record T_ModelType_ : IT_ModelType_");
Emit("    {");
Emit("        public static T_ModelType_? CreateFrom(IT_ModelType_? source)");
Emit("        {");
Emit("            if (source is null) return null;");
Emit("            if (source is T_ModelType_ concrete) return concrete;");
Emit("            return new T_ModelType_(source);");
Emit("        }");
Emit("");
Emit("        public int TestData { get; init; }");
Emit("");
Emit("        public T_ModelType_() { }");
Emit("        public T_ModelType_(int testData)");
Emit("        {");
Emit("            TestData = testData;");
Emit("        }");
Emit("        public T_ModelType_(IT_ModelType_ source)");
Emit("        {");
Emit("            if (source is null) throw new ArgumentNullException(nameof(source));");
Emit("            TestData = source.TestData;");
Emit("        }");
Emit("    }");
    }
Emit("");
    foreach (var cs in outerScope.Iterators["Classes"].Iterations) {
    using (NewScope(cs)) {
Emit("    public partial record T_ClassName_ : IT_ClassName_");
Emit("    {");
Emit("        [MethodImpl(MethodImplOptions.AggressiveInlining)]");
Emit("        public static T_ClassName_? CreateFrom(IT_ClassName_? source)");
Emit("        {");
Emit("            if (source is null) return null;");
Emit("            if (source is T_ClassName_ thisClass) return thisClass;");
Emit("            return new T_ClassName_(source);");
Emit("        }");
Emit("");
Emit("        private static readonly T_ClassName_ _empty = new T_ClassName_();");
Emit("        public static T_ClassName_ Empty => _empty;");
Emit("");
        using (Ignored()) {
Emit("        private const int T_ClassTag_ = 99;");
        }
Emit("        private const int ClassTag = T_ClassTag_;");
Emit("");
        foreach (var fs in cs.Iterators["Fields"].Iterations) {
          using (NewScope(fs)) {
            var fieldInfo = new FieldInfo(fs, _engine.Current);
        switch (fieldInfo.Kind)
        {
            case FieldKind.UnaryModel:
Emit("        public T_ModelType_? T_UnaryModelFieldName_ { get; init; }");
Emit("        IT_ModelType_? IT_ClassName_.T_UnaryModelFieldName_ => T_UnaryModelFieldName_;");
            break; case FieldKind.ArrayModel:
Emit("        public ImmutableList<T_ModelType_?>? T_ArrayModelFieldName_ { get; init; }");
Emit("        IEnumerable<IT_ModelType_?>? IT_ClassName_.T_ArrayModelFieldName_ => T_ArrayModelFieldName_;");
            break; case FieldKind.IndexModel:
Emit("        public ImmutableDictionary<T_IndexType_, T_ModelType_?>? T_IndexModelFieldName_ { get; init; }");
Emit("        IEnumerable<KeyValuePair<T_IndexType_, IT_ModelType_?>>? IT_ClassName_.T_IndexModelFieldName_ => T_IndexModelFieldName_?");
Emit("            .Select(kvp => new KeyValuePair<T_IndexType_, IT_ModelType_?>(kvp.Key, kvp.Value));");
            break; case FieldKind.UnaryMaybe:
Emit("        public T_ExternalOtherType_? T_UnaryMaybeFieldName_ { get; init; }");
Emit("        T_ExternalOtherType_? IT_ClassName_.T_UnaryMaybeFieldName_ => T_UnaryMaybeFieldName_;");
            break; case FieldKind.ArrayMaybe:
Emit("        public ImmutableList<T_ExternalOtherType_?>? T_ArrayMaybeFieldName_ { get; init; }");
Emit("        IEnumerable<T_ExternalOtherType_?>? IT_ClassName_.T_ArrayMaybeFieldName_ => T_ArrayMaybeFieldName_;");
            break; case FieldKind.IndexMaybe:
Emit("        public ImmutableDictionary<T_IndexType_, T_ExternalOtherType_?>? T_IndexMaybeFieldName_ { get; init; }");
Emit("        IEnumerable<KeyValuePair<T_IndexType_, T_ExternalOtherType_?>>? IT_ClassName_.T_IndexMaybeFieldName_ => T_IndexMaybeFieldName_;");
            break; case FieldKind.UnaryOther:
Emit("        public T_ExternalOtherType_ T_UnaryOtherFieldName_ { get; init; }");
Emit("        T_ExternalOtherType_ IT_ClassName_.T_UnaryOtherFieldName_ => T_UnaryOtherFieldName_;");
            break; case FieldKind.ArrayOther:
Emit("        public ImmutableList<T_ExternalOtherType_>? T_ArrayOtherFieldName_ { get; init; }");
Emit("        IEnumerable<T_ExternalOtherType_>? IT_ClassName_.T_ArrayOtherFieldName_ => T_ArrayOtherFieldName_;");
            break; case FieldKind.IndexOther:
Emit("        public ImmutableDictionary<T_IndexType_, T_ExternalOtherType_>? T_IndexOtherFieldName_ { get; init; }");
Emit("        IEnumerable<KeyValuePair<T_IndexType_, T_ExternalOtherType_>>? IT_ClassName_.T_IndexOtherFieldName_ => T_IndexOtherFieldName_;");
            break; case FieldKind.UnaryBuffer:
Emit("        public Octets? T_UnaryBufferFieldName_ { get; init; }");
Emit("        Octets? IT_ClassName_.T_UnaryBufferFieldName_ => T_UnaryBufferFieldName_;");
            break; case FieldKind.ArrayBuffer:
Emit("        public ImmutableList<Octets?>? T_ArrayBufferFieldName_ { get; init; }");
Emit("        IEnumerable<Octets?>? IT_ClassName_.T_ArrayBufferFieldName_ => T_ArrayBufferFieldName_;");
            break; case FieldKind.IndexBuffer:
Emit("        public ImmutableDictionary<T_IndexType_, Octets?>? T_IndexBufferFieldName_ { get; init; }");
Emit("        IEnumerable<KeyValuePair<string, Octets?>>? IT_ClassName_.T_IndexBufferFieldName_ => T_IndexBufferFieldName_;");
            break; case FieldKind.UnaryString:
Emit("        public String? T_UnaryStringFieldName_ { get; init; }");
Emit("        String? IT_ClassName_.T_UnaryStringFieldName_ => T_UnaryStringFieldName_;");
            break; case FieldKind.ArrayString:
Emit("        public ImmutableList<String?>? T_ArrayStringFieldName_ { get; init; }");
Emit("        IEnumerable<String?>? IT_ClassName_.T_ArrayStringFieldName_ => T_ArrayStringFieldName_;");
            break; case FieldKind.IndexString:
Emit("        public ImmutableDictionary<T_IndexType_, String?>? T_IndexStringFieldName_ { get; init; }");
Emit("        IEnumerable<KeyValuePair<string, String?>>? IT_ClassName_.T_IndexStringFieldName_ => T_IndexStringFieldName_;");
            break; default: break;
        }
        }}
Emit("");
Emit("        [MethodImpl(MethodImplOptions.AggressiveInlining)]");
Emit("        public T_ClassName_()");
Emit("        {");
Emit("        }");
Emit("");
Emit("        [MethodImpl(MethodImplOptions.AggressiveInlining)]");
Emit("        public T_ClassName_(T_ClassName_ source)");
Emit("        {");
Emit("            if (source is null) throw new ArgumentNullException(nameof(source));");
            foreach (var fs in cs.Iterators["Fields"].Iterations) {
              using (NewScope(fs)) {
                var fieldInfo = new FieldInfo(fs, _engine.Current);
            switch (fieldInfo.Kind)
            {
                case FieldKind.UnaryModel:
Emit("            T_UnaryModelFieldName_ = source.T_UnaryModelFieldName_;");
                break; case FieldKind.ArrayModel:
Emit("            T_ArrayModelFieldName_ = source.T_ArrayModelFieldName_;");
                break; case FieldKind.IndexModel:
Emit("            T_IndexModelFieldName_ = source.T_IndexModelFieldName_;");
                break; case FieldKind.UnaryMaybe:
Emit("            T_UnaryMaybeFieldName_ = source.T_UnaryMaybeFieldName_;");
                break; case FieldKind.ArrayMaybe:
Emit("            T_ArrayMaybeFieldName_ = source.T_ArrayMaybeFieldName_;");
                break; case FieldKind.IndexMaybe:
Emit("            T_IndexMaybeFieldName_ = source.T_IndexMaybeFieldName_;");
                break; case FieldKind.UnaryOther:
Emit("            T_UnaryOtherFieldName_ = source.T_UnaryOtherFieldName_;");
                break; case FieldKind.ArrayOther:
Emit("            T_ArrayOtherFieldName_ = source.T_ArrayOtherFieldName_;");
                break; case FieldKind.IndexOther:
Emit("            T_IndexOtherFieldName_ = source.T_IndexOtherFieldName_;");
                break; case FieldKind.UnaryBuffer:
Emit("            T_UnaryBufferFieldName_ = source.T_UnaryBufferFieldName_;");
                break; case FieldKind.ArrayBuffer:
Emit("            T_ArrayBufferFieldName_ = source.T_ArrayBufferFieldName_;");
                break; case FieldKind.IndexBuffer:
Emit("            T_IndexBufferFieldName_ = source.T_IndexBufferFieldName_;");
                break; case FieldKind.UnaryString:
Emit("            T_UnaryStringFieldName_ = source.T_UnaryStringFieldName_;");
                break; case FieldKind.ArrayString:
Emit("            T_ArrayStringFieldName_ = source.T_ArrayStringFieldName_;");
                break; case FieldKind.IndexString:
Emit("            T_IndexStringFieldName_ = source.T_IndexStringFieldName_;");
                break; default: break;
            }
            }}
Emit("        }");
Emit("");
Emit("        [MethodImpl(MethodImplOptions.AggressiveInlining)]");
Emit("        public T_ClassName_(IT_ClassName_? source)");
Emit("        {");
Emit("            if (source is null) throw new ArgumentNullException(nameof(source));");
            foreach (var fs in cs.Iterators["Fields"].Iterations) {
              using (NewScope(fs)) {
                var fieldInfo = new FieldInfo(fs, _engine.Current);
            switch (fieldInfo.Kind)
            {
                case FieldKind.UnaryModel:
Emit("            T_UnaryModelFieldName_ = T_ModelType_.CreateFrom(source.T_UnaryModelFieldName_);");
                break; case FieldKind.ArrayModel:
Emit("            T_ArrayModelFieldName_ = source.T_ArrayModelFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableList<T_ModelType_?>.Empty.AddRange(source.T_ArrayModelFieldName_.Select(x => T_ModelType_.CreateFrom(x)));");
                break; case FieldKind.IndexModel:
Emit("            T_IndexModelFieldName_ = source.T_IndexModelFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableDictionary<T_IndexType_, T_ModelType_?>.Empty.AddRange(");
Emit("                    source.T_IndexModelFieldName_.Select(x => new KeyValuePair<T_IndexType_, T_ModelType_?>(x.Key, T_ModelType_.CreateFrom(x.Value))));");
                break; case FieldKind.UnaryMaybe:
Emit("            T_UnaryMaybeFieldName_ = source.T_UnaryMaybeFieldName_;");
                break; case FieldKind.ArrayMaybe:
Emit("            T_ArrayMaybeFieldName_ = source.T_ArrayMaybeFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableList<T_ExternalOtherType_?>.Empty.AddRange(source.T_ArrayMaybeFieldName_);");
                break; case FieldKind.IndexMaybe:
Emit("            T_IndexMaybeFieldName_ = source.T_IndexMaybeFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableDictionary<T_IndexType_, T_ExternalOtherType_?>.Empty.AddRange(source.T_IndexMaybeFieldName_);");
                break; case FieldKind.UnaryOther:
Emit("            T_UnaryOtherFieldName_ = source.T_UnaryOtherFieldName_;");
                break; case FieldKind.ArrayOther:
Emit("            T_ArrayOtherFieldName_ = source.T_ArrayOtherFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableList<T_ExternalOtherType_>.Empty.AddRange(source.T_ArrayOtherFieldName_);");
                break; case FieldKind.IndexOther:
Emit("            T_IndexOtherFieldName_ = source.T_IndexOtherFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableDictionary<T_IndexType_, T_ExternalOtherType_>.Empty.AddRange(source.T_IndexOtherFieldName_);");
                break; case FieldKind.UnaryBuffer:
Emit("            T_UnaryBufferFieldName_ = source.T_UnaryBufferFieldName_;");
                break; case FieldKind.ArrayBuffer:
Emit("            T_ArrayBufferFieldName_ = source.T_ArrayBufferFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableList<Octets?>.Empty.AddRange(source.T_ArrayBufferFieldName_);");
                break; case FieldKind.IndexBuffer:
Emit("            T_IndexBufferFieldName_ = source.T_IndexBufferFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableDictionary<T_IndexType_, Octets?>.Empty.AddRange(source.T_IndexBufferFieldName_);");
                break; case FieldKind.UnaryString:
Emit("            T_UnaryStringFieldName_ = source.T_UnaryStringFieldName_;");
                break; case FieldKind.ArrayString:
Emit("            T_ArrayStringFieldName_ = source.T_ArrayStringFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableList<String?>.Empty.AddRange(source.T_ArrayStringFieldName_);");
                break; case FieldKind.IndexString:
Emit("            T_IndexStringFieldName_ = source.T_IndexStringFieldName_ is null");
Emit("                ? default");
Emit("                : ImmutableDictionary<T_IndexType_, String?>.Empty.AddRange(source.T_IndexStringFieldName_);");
                break; default: break;
            }
            }}
Emit("        }");
Emit("");
Emit("        public virtual bool Equals(T_ClassName_? other)");
Emit("        {");
Emit("            if (other is null) return false;");
Emit("            if (ReferenceEquals(other, this)) return true;");
            foreach (var fs in cs.Iterators["Fields"].Iterations) {
              using (NewScope(fs)) {
                var fieldInfo = new FieldInfo(fs, _engine.Current);
            switch (fieldInfo.Kind)
            {
                case FieldKind.UnaryModel:
Emit("            if (!T_UnaryModelFieldName_.ValueEquals(other.T_UnaryModelFieldName_)) return false;");
                break; case FieldKind.ArrayModel:
Emit("            if (!T_ArrayModelFieldName_.ArrayEquals(other.T_ArrayModelFieldName_)) return false;");
                break; case FieldKind.IndexModel:
Emit("            if (!T_IndexModelFieldName_.IndexEquals(other.T_IndexModelFieldName_)) return false;");
                break; case FieldKind.UnaryMaybe:
Emit("            if (!T_UnaryMaybeFieldName_.ValueEquals(other.T_UnaryMaybeFieldName_)) return false;");
                break; case FieldKind.ArrayMaybe:
Emit("            if (!T_ArrayMaybeFieldName_.ArrayEquals(other.T_ArrayMaybeFieldName_)) return false;");
                break; case FieldKind.IndexMaybe:
Emit("            if (!T_IndexMaybeFieldName_.IndexEquals(other.T_IndexMaybeFieldName_)) return false;");
                break; case FieldKind.UnaryOther:
Emit("            if (!T_UnaryOtherFieldName_.ValueEquals(other.T_UnaryOtherFieldName_)) return false;");
                break; case FieldKind.ArrayOther:
Emit("            if (!T_ArrayOtherFieldName_.ArrayEquals(other.T_ArrayOtherFieldName_)) return false;");
                break; case FieldKind.IndexOther:
Emit("            if (!T_IndexOtherFieldName_.IndexEquals(other.T_IndexOtherFieldName_)) return false;");
                break; case FieldKind.UnaryBuffer:
Emit("            if (!T_UnaryBufferFieldName_.ValueEquals(other.T_UnaryBufferFieldName_)) return false;");
                break; case FieldKind.ArrayBuffer:
Emit("            if (!T_ArrayBufferFieldName_.ArrayEquals(other.T_ArrayBufferFieldName_)) return false;");
                break; case FieldKind.IndexBuffer:
Emit("            if (!T_IndexBufferFieldName_.IndexEquals(other.T_IndexBufferFieldName_)) return false;");
                break; case FieldKind.UnaryString:
Emit("            if (!T_UnaryStringFieldName_.ValueEquals(other.T_UnaryStringFieldName_)) return false;");
                break; case FieldKind.ArrayString:
Emit("            if (!T_ArrayStringFieldName_.ArrayEquals(other.T_ArrayStringFieldName_)) return false;");
                break; case FieldKind.IndexString:
Emit("            if (!T_IndexStringFieldName_.IndexEquals(other.T_IndexStringFieldName_)) return false;");
                break; default: break;
            }
            }}
Emit("            return true;");
Emit("        }");
Emit("");
Emit("        private int CalcHashCode()");
Emit("        {");
Emit("            HashCode hc = new HashCode();");
            foreach (var fs in cs.Iterators["Fields"].Iterations) {
              using (NewScope(fs)) {
                var fieldInfo = new FieldInfo(fs, _engine.Current);
            switch (fieldInfo.Kind)
            {
                case FieldKind.UnaryModel:
Emit("            hc.Add(T_UnaryModelFieldName_.CalcHashUnary());");
                break; case FieldKind.ArrayModel:
Emit("            hc.Add(T_ArrayModelFieldName_.CalcHashArray());");
                break; case FieldKind.IndexModel:
Emit("            hc.Add(T_IndexModelFieldName_.CalcHashIndex());");
                break; case FieldKind.UnaryMaybe:
Emit("            hc.Add(T_UnaryMaybeFieldName_.CalcHashUnary());");
                break; case FieldKind.ArrayMaybe:
Emit("            hc.Add(T_ArrayMaybeFieldName_.CalcHashArray());");
                break; case FieldKind.IndexMaybe:
Emit("            hc.Add(T_IndexMaybeFieldName_.CalcHashIndex());");
                break; case FieldKind.UnaryOther:
Emit("            hc.Add(T_UnaryOtherFieldName_.CalcHashUnary());");
                break; case FieldKind.ArrayOther:
Emit("            hc.Add(T_ArrayOtherFieldName_.CalcHashArray());");
                break; case FieldKind.IndexOther:
Emit("            hc.Add(T_IndexOtherFieldName_.CalcHashIndex());");
                break; case FieldKind.UnaryBuffer:
Emit("            hc.Add(T_UnaryBufferFieldName_.CalcHashUnary());");
                break; case FieldKind.ArrayBuffer:
Emit("            hc.Add(T_ArrayBufferFieldName_.CalcHashArray());");
                break; case FieldKind.IndexBuffer:
Emit("            hc.Add(T_IndexBufferFieldName_.CalcHashIndex());");
                break; case FieldKind.UnaryString:
Emit("            hc.Add(T_UnaryStringFieldName_.CalcHashUnary());");
                break; case FieldKind.ArrayString:
Emit("            hc.Add(T_ArrayStringFieldName_.CalcHashArray());");
                break; case FieldKind.IndexString:
Emit("            hc.Add(T_IndexStringFieldName_.CalcHashIndex());");
                break; default: break;
            }
            }}
Emit("            return hc.ToHashCode();");
Emit("        }");
Emit("");
Emit("        private int? _hashCode = null;");
Emit("        public override int GetHashCode()");
Emit("        {");
Emit("            if (_hashCode is null)");
Emit("                _hashCode = CalcHashCode();");
Emit("            return _hashCode.Value;");
Emit("        }");
Emit("    }");
Emit("");
    }}
Emit("");
Emit("}");
// |metacode:generator_footer|
        }
    }
}
// |metacode:generator_end|
