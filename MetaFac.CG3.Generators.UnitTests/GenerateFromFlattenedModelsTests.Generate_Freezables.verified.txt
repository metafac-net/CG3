// <auto-generated />
#region Auto-generated
//--------------------------------------------------------------------------------
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated using MetaFac.CG3 tools and user supplied metadata.
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG3.CLI
//
// For more information about using this tool, the help command is:
// mfcg3 g2c --help
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Collections.Freezables;
using MetaFac.Mutability;
using DataFac.Memory;
using MetaFac.CG3.Runtime;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Interfaces;

namespace Generated.Freezables
{


    public sealed partial class BuiltinTypes : FreezableBase, IBuiltinTypes, ICopyFrom<BuiltinTypes>, IEquatable<BuiltinTypes>
    {
        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly(string verb, [CallerMemberName] string? method = null)
        {
            throw new InvalidOperationException($"Cannot {verb} '{method}' when read-only");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BuiltinTypes? CreateFrom(IBuiltinTypes? source)
        {
            if (source is null) return null;
            if (source is BuiltinTypes thisClass && thisClass.IsFrozen()) return thisClass;
            return new BuiltinTypes(source);
        }

        private static BuiltinTypes CreateEmpty()
        {
            var result = new BuiltinTypes();
            result.Freeze();
            return result;
        }
#pragma warning disable 109
        public new static readonly BuiltinTypes Empty = CreateEmpty();
#pragma warning restore 109

        private const int ClassTag = 1;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T CheckNotFrozen<T>(ref T value)
        {
            if (IsFrozen()) ThrowIsReadonly("set");
            return ref value;
        }

        private FreezableArray<Boolean>? field_Bools;
        public FreezableArray<Boolean>? Bools
        {
            get => field_Bools;
            set => field_Bools = CheckNotFrozen(ref value);
        }
        private FreezableArray<SByte>? field_SBytes;
        public FreezableArray<SByte>? SBytes
        {
            get => field_SBytes;
            set => field_SBytes = CheckNotFrozen(ref value);
        }
        private FreezableArray<Byte>? field_Bytes;
        public FreezableArray<Byte>? Bytes
        {
            get => field_Bytes;
            set => field_Bytes = CheckNotFrozen(ref value);
        }
        private FreezableArray<Int16>? field_Shorts;
        public FreezableArray<Int16>? Shorts
        {
            get => field_Shorts;
            set => field_Shorts = CheckNotFrozen(ref value);
        }
        private FreezableArray<UInt16>? field_UShorts;
        public FreezableArray<UInt16>? UShorts
        {
            get => field_UShorts;
            set => field_UShorts = CheckNotFrozen(ref value);
        }
        private FreezableArray<Char>? field_Chars;
        public FreezableArray<Char>? Chars
        {
            get => field_Chars;
            set => field_Chars = CheckNotFrozen(ref value);
        }
        private FreezableArray<Int32>? field_Ints;
        public FreezableArray<Int32>? Ints
        {
            get => field_Ints;
            set => field_Ints = CheckNotFrozen(ref value);
        }
        private FreezableArray<UInt32>? field_UInts;
        public FreezableArray<UInt32>? UInts
        {
            get => field_UInts;
            set => field_UInts = CheckNotFrozen(ref value);
        }
        private FreezableArray<Single>? field_Floats;
        public FreezableArray<Single>? Floats
        {
            get => field_Floats;
            set => field_Floats = CheckNotFrozen(ref value);
        }
        private FreezableArray<Int64>? field_Longs;
        public FreezableArray<Int64>? Longs
        {
            get => field_Longs;
            set => field_Longs = CheckNotFrozen(ref value);
        }
        private FreezableArray<UInt64>? field_ULongs;
        public FreezableArray<UInt64>? ULongs
        {
            get => field_ULongs;
            set => field_ULongs = CheckNotFrozen(ref value);
        }
        private FreezableArray<Double>? field_Doubles;
        public FreezableArray<Double>? Doubles
        {
            get => field_Doubles;
            set => field_Doubles = CheckNotFrozen(ref value);
        }
        private FreezableArray<DateTime>? field_DateTimes;
        public FreezableArray<DateTime>? DateTimes
        {
            get => field_DateTimes;
            set => field_DateTimes = CheckNotFrozen(ref value);
        }
        private FreezableArray<TimeSpan>? field_TimeSpans;
        public FreezableArray<TimeSpan>? TimeSpans
        {
            get => field_TimeSpans;
            set => field_TimeSpans = CheckNotFrozen(ref value);
        }
        private FreezableArray<Decimal>? field_Decimals;
        public FreezableArray<Decimal>? Decimals
        {
            get => field_Decimals;
            set => field_Decimals = CheckNotFrozen(ref value);
        }
        private FreezableArray<DateTimeOffset>? field_DateTimeOffsets;
        public FreezableArray<DateTimeOffset>? DateTimeOffsets
        {
            get => field_DateTimeOffsets;
            set => field_DateTimeOffsets = CheckNotFrozen(ref value);
        }
        private FreezableArray<Guid>? field_Guids;
        public FreezableArray<Guid>? Guids
        {
            get => field_Guids;
            set => field_Guids = CheckNotFrozen(ref value);
        }
        private FreezableArray<String?>? field_Strings;
        public FreezableArray<String?>? Strings
        {
            get => field_Strings;
            set => field_Strings = CheckNotFrozen(ref value);
        }
        private FreezableArray<Octets?>? field_Buffers;
        public FreezableArray<Octets?>? Buffers
        {
            get => field_Buffers;
            set => field_Buffers = CheckNotFrozen(ref value);
        }
        private FreezableArray<LabApps.Units.Quantity>? field_Quantities;
        public FreezableArray<LabApps.Units.Quantity>? Quantities
        {
            get => field_Quantities;
            set => field_Quantities = CheckNotFrozen(ref value);
        }
        private FreezableArray<System.DayOfWeek>? field_MyDaysOfWeek;
        public FreezableArray<System.DayOfWeek>? MyDaysOfWeek
        {
            get => field_MyDaysOfWeek;
            set => field_MyDaysOfWeek = CheckNotFrozen(ref value);
        }
        private FreezableArray<System.DateTimeKind>? field_MyDateTimeKinds;
        public FreezableArray<System.DateTimeKind>? MyDateTimeKinds
        {
            get => field_MyDateTimeKinds;
            set => field_MyDateTimeKinds = CheckNotFrozen(ref value);
        }


        IEnumerable<Boolean>? IBuiltinTypes.Bools => field_Bools;
        IEnumerable<SByte>? IBuiltinTypes.SBytes => field_SBytes;
        IEnumerable<Byte>? IBuiltinTypes.Bytes => field_Bytes;
        IEnumerable<Int16>? IBuiltinTypes.Shorts => field_Shorts;
        IEnumerable<UInt16>? IBuiltinTypes.UShorts => field_UShorts;
        IEnumerable<Char>? IBuiltinTypes.Chars => field_Chars;
        IEnumerable<Int32>? IBuiltinTypes.Ints => field_Ints;
        IEnumerable<UInt32>? IBuiltinTypes.UInts => field_UInts;
        IEnumerable<Single>? IBuiltinTypes.Floats => field_Floats;
        IEnumerable<Int64>? IBuiltinTypes.Longs => field_Longs;
        IEnumerable<UInt64>? IBuiltinTypes.ULongs => field_ULongs;
        IEnumerable<Double>? IBuiltinTypes.Doubles => field_Doubles;
        IEnumerable<DateTime>? IBuiltinTypes.DateTimes => field_DateTimes;
        IEnumerable<TimeSpan>? IBuiltinTypes.TimeSpans => field_TimeSpans;
        IEnumerable<Decimal>? IBuiltinTypes.Decimals => field_Decimals;
        IEnumerable<DateTimeOffset>? IBuiltinTypes.DateTimeOffsets => field_DateTimeOffsets;
        IEnumerable<Guid>? IBuiltinTypes.Guids => field_Guids;
        IEnumerable<String?>? IBuiltinTypes.Strings => field_Strings;
        IEnumerable<Octets?>? IBuiltinTypes.Buffers => field_Buffers;
        IEnumerable<LabApps.Units.Quantity>? IBuiltinTypes.Quantities => field_Quantities;
        IEnumerable<System.DayOfWeek>? IBuiltinTypes.MyDaysOfWeek => field_MyDaysOfWeek;
        IEnumerable<System.DateTimeKind>? IBuiltinTypes.MyDateTimeKinds => field_MyDateTimeKinds;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(BuiltinTypes source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));

            field_Bools = source.field_Bools;
            field_SBytes = source.field_SBytes;
            field_Bytes = source.field_Bytes;
            field_Shorts = source.field_Shorts;
            field_UShorts = source.field_UShorts;
            field_Chars = source.field_Chars;
            field_Ints = source.field_Ints;
            field_UInts = source.field_UInts;
            field_Floats = source.field_Floats;
            field_Longs = source.field_Longs;
            field_ULongs = source.field_ULongs;
            field_Doubles = source.field_Doubles;
            field_DateTimes = source.field_DateTimes;
            field_TimeSpans = source.field_TimeSpans;
            field_Decimals = source.field_Decimals;
            field_DateTimeOffsets = source.field_DateTimeOffsets;
            field_Guids = source.field_Guids;
            field_Strings = source.field_Strings;
            field_Buffers = source.field_Buffers;
            field_Quantities = source.field_Quantities;
            field_MyDaysOfWeek = source.field_MyDaysOfWeek;
            field_MyDateTimeKinds = source.field_MyDateTimeKinds;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(IBuiltinTypes source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));

            field_Bools = FreezableArray<Boolean>.CreateFrom(source.Bools);
            field_SBytes = FreezableArray<SByte>.CreateFrom(source.SBytes);
            field_Bytes = FreezableArray<Byte>.CreateFrom(source.Bytes);
            field_Shorts = FreezableArray<Int16>.CreateFrom(source.Shorts);
            field_UShorts = FreezableArray<UInt16>.CreateFrom(source.UShorts);
            field_Chars = FreezableArray<Char>.CreateFrom(source.Chars);
            field_Ints = FreezableArray<Int32>.CreateFrom(source.Ints);
            field_UInts = FreezableArray<UInt32>.CreateFrom(source.UInts);
            field_Floats = FreezableArray<Single>.CreateFrom(source.Floats);
            field_Longs = FreezableArray<Int64>.CreateFrom(source.Longs);
            field_ULongs = FreezableArray<UInt64>.CreateFrom(source.ULongs);
            field_Doubles = FreezableArray<Double>.CreateFrom(source.Doubles);
            field_DateTimes = FreezableArray<DateTime>.CreateFrom(source.DateTimes);
            field_TimeSpans = FreezableArray<TimeSpan>.CreateFrom(source.TimeSpans);
            field_Decimals = FreezableArray<Decimal>.CreateFrom(source.Decimals);
            field_DateTimeOffsets = FreezableArray<DateTimeOffset>.CreateFrom(source.DateTimeOffsets);
            field_Guids = FreezableArray<Guid>.CreateFrom(source.Guids);
            field_Strings = FreezableArray<String?>.CreateFrom(source.Strings);
            field_Buffers = FreezableArray<Octets?>.CreateFrom(source.Buffers);
            field_Quantities = FreezableArray<LabApps.Units.Quantity>.CreateFrom(source.Quantities);
            field_MyDaysOfWeek = FreezableArray<System.DayOfWeek>.CreateFrom(source.MyDaysOfWeek);
            field_MyDateTimeKinds = FreezableArray<System.DateTimeKind>.CreateFrom(source.MyDateTimeKinds);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(BuiltinTypes? source)
        {
            if (IsFrozen()) ThrowIsReadonly("call");
            if (source is null) return;
            base.CopyFrom(source);

            field_Bools = source.field_Bools;
            field_SBytes = source.field_SBytes;
            field_Bytes = source.field_Bytes;
            field_Shorts = source.field_Shorts;
            field_UShorts = source.field_UShorts;
            field_Chars = source.field_Chars;
            field_Ints = source.field_Ints;
            field_UInts = source.field_UInts;
            field_Floats = source.field_Floats;
            field_Longs = source.field_Longs;
            field_ULongs = source.field_ULongs;
            field_Doubles = source.field_Doubles;
            field_DateTimes = source.field_DateTimes;
            field_TimeSpans = source.field_TimeSpans;
            field_Decimals = source.field_Decimals;
            field_DateTimeOffsets = source.field_DateTimeOffsets;
            field_Guids = source.field_Guids;
            field_Strings = source.field_Strings;
            field_Buffers = source.field_Buffers;
            field_Quantities = source.field_Quantities;
            field_MyDaysOfWeek = source.field_MyDaysOfWeek;
            field_MyDateTimeKinds = source.field_MyDateTimeKinds;
        }

        protected override void OnFreeze()
        {
            field_Bools?.Freeze();
            field_SBytes?.Freeze();
            field_Bytes?.Freeze();
            field_Shorts?.Freeze();
            field_UShorts?.Freeze();
            field_Chars?.Freeze();
            field_Ints?.Freeze();
            field_UInts?.Freeze();
            field_Floats?.Freeze();
            field_Longs?.Freeze();
            field_ULongs?.Freeze();
            field_Doubles?.Freeze();
            field_DateTimes?.Freeze();
            field_TimeSpans?.Freeze();
            field_Decimals?.Freeze();
            field_DateTimeOffsets?.Freeze();
            field_Guids?.Freeze();
            field_Strings?.Freeze();
            field_Buffers?.Freeze();
            field_Quantities?.Freeze();
            field_MyDaysOfWeek?.Freeze();
            field_MyDateTimeKinds?.Freeze();
            base.OnFreeze();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(BuiltinTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Bools.ArrayEquals(other.field_Bools)) return false;
            if (!field_SBytes.ArrayEquals(other.field_SBytes)) return false;
            if (!field_Bytes.ArrayEquals(other.field_Bytes)) return false;
            if (!field_Shorts.ArrayEquals(other.field_Shorts)) return false;
            if (!field_UShorts.ArrayEquals(other.field_UShorts)) return false;
            if (!field_Chars.ArrayEquals(other.field_Chars)) return false;
            if (!field_Ints.ArrayEquals(other.field_Ints)) return false;
            if (!field_UInts.ArrayEquals(other.field_UInts)) return false;
            if (!field_Floats.ArrayEquals(other.field_Floats)) return false;
            if (!field_Longs.ArrayEquals(other.field_Longs)) return false;
            if (!field_ULongs.ArrayEquals(other.field_ULongs)) return false;
            if (!field_Doubles.ArrayEquals(other.field_Doubles)) return false;
            if (!field_DateTimes.ArrayEquals(other.field_DateTimes)) return false;
            if (!field_TimeSpans.ArrayEquals(other.field_TimeSpans)) return false;
            if (!field_Decimals.ArrayEquals(other.field_Decimals)) return false;
            if (!field_DateTimeOffsets.ArrayEquals(other.field_DateTimeOffsets)) return false;
            if (!field_Guids.ArrayEquals(other.field_Guids)) return false;
            if (!field_Strings.ArrayEquals(other.field_Strings)) return false;
            if (!field_Buffers.ArrayEquals(other.field_Buffers)) return false;
            if (!field_Quantities.ArrayEquals(other.field_Quantities)) return false;
            if (!field_MyDaysOfWeek.ArrayEquals(other.field_MyDaysOfWeek)) return false;
            if (!field_MyDateTimeKinds.ArrayEquals(other.field_MyDateTimeKinds)) return false;
            return base.Equals(other);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(BuiltinTypes left, BuiltinTypes right)
        {
            if (ReferenceEquals(left, right)) return true;
            if (left is null) return false;
            if (right is null) return false;
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(BuiltinTypes left, BuiltinTypes right)
        {
            if (ReferenceEquals(left, right)) return false;
            if (left is null) return true;
            if (right is null) return true;
            return !(left.Equals(right));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is BuiltinTypes other && Equals(other);
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            unchecked
            {
                hash = (hash * 397) ^ (field_Bools.CalcHashArray());
                hash = (hash * 397) ^ (field_SBytes.CalcHashArray());
                hash = (hash * 397) ^ (field_Bytes.CalcHashArray());
                hash = (hash * 397) ^ (field_Shorts.CalcHashArray());
                hash = (hash * 397) ^ (field_UShorts.CalcHashArray());
                hash = (hash * 397) ^ (field_Chars.CalcHashArray());
                hash = (hash * 397) ^ (field_Ints.CalcHashArray());
                hash = (hash * 397) ^ (field_UInts.CalcHashArray());
                hash = (hash * 397) ^ (field_Floats.CalcHashArray());
                hash = (hash * 397) ^ (field_Longs.CalcHashArray());
                hash = (hash * 397) ^ (field_ULongs.CalcHashArray());
                hash = (hash * 397) ^ (field_Doubles.CalcHashArray());
                hash = (hash * 397) ^ (field_DateTimes.CalcHashArray());
                hash = (hash * 397) ^ (field_TimeSpans.CalcHashArray());
                hash = (hash * 397) ^ (field_Decimals.CalcHashArray());
                hash = (hash * 397) ^ (field_DateTimeOffsets.CalcHashArray());
                hash = (hash * 397) ^ (field_Guids.CalcHashArray());
                hash = (hash * 397) ^ (field_Strings.CalcHashArray());
                hash = (hash * 397) ^ (field_Buffers.CalcHashArray());
                hash = (hash * 397) ^ (field_Quantities.CalcHashArray());
                hash = (hash * 397) ^ (field_MyDaysOfWeek.CalcHashArray());
                hash = (hash * 397) ^ (field_MyDateTimeKinds.CalcHashArray());
            }
            return hash;
        }

    }


}