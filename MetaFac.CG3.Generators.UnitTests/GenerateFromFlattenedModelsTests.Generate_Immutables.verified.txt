#region Auto-generated
//
// Warning: This code was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated by the MetaFac.CG3.CLI tool (mfcg3)
// and modified according to user supplied metadata:
//
// Generator: MetaFac.CG3.Generator.Immutables.Generator (version 3.3.4.56909)
// Metadata : T_MetadataSource_ T_MetadataVersion_
//
// For more information about using this tool, the help command is:
// mfcg3 g2c --help
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG3.CLI
//
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Mutability;
using MetaFac.Memory;
using MetaFac.CG3.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Interfaces;

namespace Generated.Immutables
{


    public partial class BuiltinTypes : IBuiltinTypes, IEquatable<BuiltinTypes>, IBuilder<BuiltinTypes, BuiltinTypes.Builder>
    {
        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly(string verb, [CallerMemberName] string? method = null)
        {
            throw new InvalidOperationException($"Cannot {verb} '{method}' when read-only");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BuiltinTypes? CreateFrom(IBuiltinTypes? source)
        {
            if (source is null) return null;
            if (source is BuiltinTypes thisClass) return thisClass;
            return new BuiltinTypes(source);
        }

        private static BuiltinTypes CreateEmpty()
        {
            var result = new BuiltinTypes();
            return result;
        }
#pragma warning disable 109
        public new static readonly BuiltinTypes Empty = CreateEmpty();
#pragma warning restore 109

        private const int ClassTag = 1;

        public ImmutableList<Boolean>? Bools { get; }
        IEnumerable<Boolean>? IBuiltinTypes.Bools => Bools is null
            ? (IEnumerable<Boolean>?)null
            : Bools;
        public ImmutableList<SByte>? SBytes { get; }
        IEnumerable<SByte>? IBuiltinTypes.SBytes => SBytes is null
            ? (IEnumerable<SByte>?)null
            : SBytes;
        public ImmutableList<Byte>? Bytes { get; }
        IEnumerable<Byte>? IBuiltinTypes.Bytes => Bytes is null
            ? (IEnumerable<Byte>?)null
            : Bytes;
        public ImmutableList<Int16>? Shorts { get; }
        IEnumerable<Int16>? IBuiltinTypes.Shorts => Shorts is null
            ? (IEnumerable<Int16>?)null
            : Shorts;
        public ImmutableList<UInt16>? UShorts { get; }
        IEnumerable<UInt16>? IBuiltinTypes.UShorts => UShorts is null
            ? (IEnumerable<UInt16>?)null
            : UShorts;
        public ImmutableList<Char>? Chars { get; }
        IEnumerable<Char>? IBuiltinTypes.Chars => Chars is null
            ? (IEnumerable<Char>?)null
            : Chars;
        public ImmutableList<Int32>? Ints { get; }
        IEnumerable<Int32>? IBuiltinTypes.Ints => Ints is null
            ? (IEnumerable<Int32>?)null
            : Ints;
        public ImmutableList<UInt32>? UInts { get; }
        IEnumerable<UInt32>? IBuiltinTypes.UInts => UInts is null
            ? (IEnumerable<UInt32>?)null
            : UInts;
        public ImmutableList<Single>? Floats { get; }
        IEnumerable<Single>? IBuiltinTypes.Floats => Floats is null
            ? (IEnumerable<Single>?)null
            : Floats;
        public ImmutableList<Int64>? Longs { get; }
        IEnumerable<Int64>? IBuiltinTypes.Longs => Longs is null
            ? (IEnumerable<Int64>?)null
            : Longs;
        public ImmutableList<UInt64>? ULongs { get; }
        IEnumerable<UInt64>? IBuiltinTypes.ULongs => ULongs is null
            ? (IEnumerable<UInt64>?)null
            : ULongs;
        public ImmutableList<Double>? Doubles { get; }
        IEnumerable<Double>? IBuiltinTypes.Doubles => Doubles is null
            ? (IEnumerable<Double>?)null
            : Doubles;
        public ImmutableList<DateTime>? DateTimes { get; }
        IEnumerable<DateTime>? IBuiltinTypes.DateTimes => DateTimes is null
            ? (IEnumerable<DateTime>?)null
            : DateTimes;
        public ImmutableList<TimeSpan>? TimeSpans { get; }
        IEnumerable<TimeSpan>? IBuiltinTypes.TimeSpans => TimeSpans is null
            ? (IEnumerable<TimeSpan>?)null
            : TimeSpans;
        public ImmutableList<Decimal>? Decimals { get; }
        IEnumerable<Decimal>? IBuiltinTypes.Decimals => Decimals is null
            ? (IEnumerable<Decimal>?)null
            : Decimals;
        public ImmutableList<DateTimeOffset>? DateTimeOffsets { get; }
        IEnumerable<DateTimeOffset>? IBuiltinTypes.DateTimeOffsets => DateTimeOffsets is null
            ? (IEnumerable<DateTimeOffset>?)null
            : DateTimeOffsets;
        public ImmutableList<Guid>? Guids { get; }
        IEnumerable<Guid>? IBuiltinTypes.Guids => Guids is null
            ? (IEnumerable<Guid>?)null
            : Guids;
        public ImmutableList<String?>? Strings { get; }
        IEnumerable<String?>? IBuiltinTypes.Strings => Strings is null
            ? (IEnumerable<String?>?)null
            : Strings;
        public ImmutableList<Octets?>? Buffers { get; }
        IEnumerable<Octets?>? IBuiltinTypes.Buffers => Buffers is null
            ? (IEnumerable<Octets?>?)null
            : Buffers;
        public ImmutableList<LabApps.Units.Quantity>? Quantities { get; }
        IEnumerable<LabApps.Units.Quantity>? IBuiltinTypes.Quantities => Quantities is null
            ? (IEnumerable<LabApps.Units.Quantity>?)null
            : Quantities;
        public ImmutableList<System.DayOfWeek>? MyDaysOfWeek { get; }
        IEnumerable<System.DayOfWeek>? IBuiltinTypes.MyDaysOfWeek => MyDaysOfWeek is null
            ? (IEnumerable<System.DayOfWeek>?)null
            : MyDaysOfWeek;
        public ImmutableList<System.DateTimeKind>? MyDateTimeKinds { get; }
        IEnumerable<System.DateTimeKind>? IBuiltinTypes.MyDateTimeKinds => MyDateTimeKinds is null
            ? (IEnumerable<System.DateTimeKind>?)null
            : MyDateTimeKinds;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(BuiltinTypes source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Bools = source.Bools;
            SBytes = source.SBytes;
            Bytes = source.Bytes;
            Shorts = source.Shorts;
            UShorts = source.UShorts;
            Chars = source.Chars;
            Ints = source.Ints;
            UInts = source.UInts;
            Floats = source.Floats;
            Longs = source.Longs;
            ULongs = source.ULongs;
            Doubles = source.Doubles;
            DateTimes = source.DateTimes;
            TimeSpans = source.TimeSpans;
            Decimals = source.Decimals;
            DateTimeOffsets = source.DateTimeOffsets;
            Guids = source.Guids;
            Strings = source.Strings;
            Buffers = source.Buffers;
            Quantities = source.Quantities;
            MyDaysOfWeek = source.MyDaysOfWeek;
            MyDateTimeKinds = source.MyDateTimeKinds;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(IBuiltinTypes? source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Bools = source.Bools is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.Bools);
            SBytes = source.SBytes is null
                ? default
                : ImmutableList<SByte>.Empty.AddRange(source.SBytes);
            Bytes = source.Bytes is null
                ? default
                : ImmutableList<Byte>.Empty.AddRange(source.Bytes);
            Shorts = source.Shorts is null
                ? default
                : ImmutableList<Int16>.Empty.AddRange(source.Shorts);
            UShorts = source.UShorts is null
                ? default
                : ImmutableList<UInt16>.Empty.AddRange(source.UShorts);
            Chars = source.Chars is null
                ? default
                : ImmutableList<Char>.Empty.AddRange(source.Chars);
            Ints = source.Ints is null
                ? default
                : ImmutableList<Int32>.Empty.AddRange(source.Ints);
            UInts = source.UInts is null
                ? default
                : ImmutableList<UInt32>.Empty.AddRange(source.UInts);
            Floats = source.Floats is null
                ? default
                : ImmutableList<Single>.Empty.AddRange(source.Floats);
            Longs = source.Longs is null
                ? default
                : ImmutableList<Int64>.Empty.AddRange(source.Longs);
            ULongs = source.ULongs is null
                ? default
                : ImmutableList<UInt64>.Empty.AddRange(source.ULongs);
            Doubles = source.Doubles is null
                ? default
                : ImmutableList<Double>.Empty.AddRange(source.Doubles);
            DateTimes = source.DateTimes is null
                ? default
                : ImmutableList<DateTime>.Empty.AddRange(source.DateTimes);
            TimeSpans = source.TimeSpans is null
                ? default
                : ImmutableList<TimeSpan>.Empty.AddRange(source.TimeSpans);
            Decimals = source.Decimals is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.Decimals);
            DateTimeOffsets = source.DateTimeOffsets is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.DateTimeOffsets);
            Guids = source.Guids is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.Guids);
            Strings = source.Strings is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Strings);
            Buffers = source.Buffers is null
                ? default
                : ImmutableList<Octets?>.Empty.AddRange(source.Buffers);
            Quantities = source.Quantities is null
                ? default
                : ImmutableList<LabApps.Units.Quantity>.Empty.AddRange(source.Quantities);
            MyDaysOfWeek = source.MyDaysOfWeek is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.MyDaysOfWeek);
            MyDateTimeKinds = source.MyDateTimeKinds is null
                ? default
                : ImmutableList<System.DateTimeKind>.Empty.AddRange(source.MyDateTimeKinds);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(BuiltinTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Bools.ArrayEquals(other.Bools)) return false;
            if (!SBytes.ArrayEquals(other.SBytes)) return false;
            if (!Bytes.ArrayEquals(other.Bytes)) return false;
            if (!Shorts.ArrayEquals(other.Shorts)) return false;
            if (!UShorts.ArrayEquals(other.UShorts)) return false;
            if (!Chars.ArrayEquals(other.Chars)) return false;
            if (!Ints.ArrayEquals(other.Ints)) return false;
            if (!UInts.ArrayEquals(other.UInts)) return false;
            if (!Floats.ArrayEquals(other.Floats)) return false;
            if (!Longs.ArrayEquals(other.Longs)) return false;
            if (!ULongs.ArrayEquals(other.ULongs)) return false;
            if (!Doubles.ArrayEquals(other.Doubles)) return false;
            if (!DateTimes.ArrayEquals(other.DateTimes)) return false;
            if (!TimeSpans.ArrayEquals(other.TimeSpans)) return false;
            if (!Decimals.ArrayEquals(other.Decimals)) return false;
            if (!DateTimeOffsets.ArrayEquals(other.DateTimeOffsets)) return false;
            if (!Guids.ArrayEquals(other.Guids)) return false;
            if (!Strings.ArrayEquals(other.Strings)) return false;
            if (!Buffers.ArrayEquals(other.Buffers)) return false;
            if (!Quantities.ArrayEquals(other.Quantities)) return false;
            if (!MyDaysOfWeek.ArrayEquals(other.MyDaysOfWeek)) return false;
            if (!MyDateTimeKinds.ArrayEquals(other.MyDateTimeKinds)) return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(BuiltinTypes left, BuiltinTypes right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(BuiltinTypes left, BuiltinTypes right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is BuiltinTypes other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Bools.CalcHashArray());
            hc.Add(SBytes.CalcHashArray());
            hc.Add(Bytes.CalcHashArray());
            hc.Add(Shorts.CalcHashArray());
            hc.Add(UShorts.CalcHashArray());
            hc.Add(Chars.CalcHashArray());
            hc.Add(Ints.CalcHashArray());
            hc.Add(UInts.CalcHashArray());
            hc.Add(Floats.CalcHashArray());
            hc.Add(Longs.CalcHashArray());
            hc.Add(ULongs.CalcHashArray());
            hc.Add(Doubles.CalcHashArray());
            hc.Add(DateTimes.CalcHashArray());
            hc.Add(TimeSpans.CalcHashArray());
            hc.Add(Decimals.CalcHashArray());
            hc.Add(DateTimeOffsets.CalcHashArray());
            hc.Add(Guids.CalcHashArray());
            hc.Add(Strings.CalcHashArray());
            hc.Add(Buffers.CalcHashArray());
            hc.Add(Quantities.CalcHashArray());
            hc.Add(MyDaysOfWeek.CalcHashArray());
            hc.Add(MyDateTimeKinds.CalcHashArray());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

        public Builder ToBuilder()
        {
            return new Builder(this);
        }

        internal BuiltinTypes(Builder source)
        {
            Bools = source.Bools;
            SBytes = source.SBytes;
            Bytes = source.Bytes;
            Shorts = source.Shorts;
            UShorts = source.UShorts;
            Chars = source.Chars;
            Ints = source.Ints;
            UInts = source.UInts;
            Floats = source.Floats;
            Longs = source.Longs;
            ULongs = source.ULongs;
            Doubles = source.Doubles;
            DateTimes = source.DateTimes;
            TimeSpans = source.TimeSpans;
            Decimals = source.Decimals;
            DateTimeOffsets = source.DateTimeOffsets;
            Guids = source.Guids;
            Strings = source.Strings;
            Buffers = source.Buffers;
            Quantities = source.Quantities;
            MyDaysOfWeek = source.MyDaysOfWeek;
            MyDateTimeKinds = source.MyDateTimeKinds;
        }

        public class Builder : IBuild<BuiltinTypes>
        {
            public ImmutableList<Boolean>? Bools { get; set; }
            public ImmutableList<SByte>? SBytes { get; set; }
            public ImmutableList<Byte>? Bytes { get; set; }
            public ImmutableList<Int16>? Shorts { get; set; }
            public ImmutableList<UInt16>? UShorts { get; set; }
            public ImmutableList<Char>? Chars { get; set; }
            public ImmutableList<Int32>? Ints { get; set; }
            public ImmutableList<UInt32>? UInts { get; set; }
            public ImmutableList<Single>? Floats { get; set; }
            public ImmutableList<Int64>? Longs { get; set; }
            public ImmutableList<UInt64>? ULongs { get; set; }
            public ImmutableList<Double>? Doubles { get; set; }
            public ImmutableList<DateTime>? DateTimes { get; set; }
            public ImmutableList<TimeSpan>? TimeSpans { get; set; }
            public ImmutableList<Decimal>? Decimals { get; set; }
            public ImmutableList<DateTimeOffset>? DateTimeOffsets { get; set; }
            public ImmutableList<Guid>? Guids { get; set; }
            public ImmutableList<String?>? Strings { get; set; }
            public ImmutableList<Octets?>? Buffers { get; set; }
            public ImmutableList<LabApps.Units.Quantity>? Quantities { get; set; }
            public ImmutableList<System.DayOfWeek>? MyDaysOfWeek { get; set; }
            public ImmutableList<System.DateTimeKind>? MyDateTimeKinds { get; set; }

            public Builder() { }
            internal Builder(BuiltinTypes source)
            {
                Bools = source.Bools;
                SBytes = source.SBytes;
                Bytes = source.Bytes;
                Shorts = source.Shorts;
                UShorts = source.UShorts;
                Chars = source.Chars;
                Ints = source.Ints;
                UInts = source.UInts;
                Floats = source.Floats;
                Longs = source.Longs;
                ULongs = source.ULongs;
                Doubles = source.Doubles;
                DateTimes = source.DateTimes;
                TimeSpans = source.TimeSpans;
                Decimals = source.Decimals;
                DateTimeOffsets = source.DateTimeOffsets;
                Guids = source.Guids;
                Strings = source.Strings;
                Buffers = source.Buffers;
                Quantities = source.Quantities;
                MyDaysOfWeek = source.MyDaysOfWeek;
                MyDateTimeKinds = source.MyDateTimeKinds;
            }

            public BuiltinTypes Build()
            {
                return new BuiltinTypes(this);
            }
        }

    }


}